# -*- coding: utf-8 -*-
"""LVADSUSR139_Abinaya_Anbu_IA1_Predictive_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cXn67lWXPM5kCrZd7M6V7RwJ4NoCiVkG
"""

#import libraraies
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression,LogisticRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score,accuracy_score,recall_score,precision_score,f1_score,classification_report,confusion_matrix

data=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/booking.csv')
data.head()

data.describe(include='all')

data.info()

#1
data.isna().sum()# missing values in bmi
#handling missing values
data.dropna()
#data.columns

mode_room=data['room type'].mode()[0]
data.fillna(mode_room,inplace=True)

data.isna().sum()# handled na values, missing values

#outliers
numerical_colm = data.select_dtypes(include=['int','float'])
for column in numerical_colm:
  plt.figure(figsize=(10,5))
  plt.title(column)
  sns.boxplot(x=data[column])
# most of the column has an outlier

numerical_colm.columns

#handeling outlier

for column in numerical_colm:

  q1=data[column].quantile(0.25)
  q3=data[column].quantile(0.75)
  iqr=q3-q1
  data= data[~((data[column]<q1-1.5*iqr)|(data[column]>q3+1.5*iqr))]
#removed outlier

#2 -encoding

cat_colm = data.select_dtypes(include=['object'])
#data.info()
cat_colm.columns

#3
#feture selection
data.drop(columns=['Booking_ID',])

encoded_data=pd.get_dummies(data,columns=['type of meal', 'room type', 'market segment type',
       'average price', 'date of reservation', 'booking status'],dtype=int)

encoded_data.head()

numerical = data.select_dtypes(include=['int','float'])
correlation_matrix=numerical.corr()

#plot
sns.heatmap(correlation_matrix,annot=True)

#4
#splitting
x=data.drop(columns=['booking status'])
y=data['booking status']

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.2,random_state=42)
y_train.shape

#5
#model development
model=LogisticRegression()
model.fit(x_train,y_train)
y_pred=model.predict(y_test)

#6
#evaluation
#accuracy_score,recall_score,precision_score,f1_score,classification_report,confusion_matrix

print('Evaluation Matrix')
acc=accuracy_score(y_test,y_pred)
print('accuracy_score',acc)
rec=recall_score(y_test,y_pred,average='weighted')
print('Recall',rec)
pre=precision_score(y_test,y_pred,average='weighted')
print('precision_score',pre)
f1_score=f1_score(y_test,y_pred,average='weighted')
print('f1_score',f1_score)
classification_report=classification_report(y_test,y_pred,average='weighted')
print('classification_report',classification_report)
confusion_matrix=confusion_matrix(y_test,y_pred,average='weighted')
print('confusion_matrix',confusion_matrix)