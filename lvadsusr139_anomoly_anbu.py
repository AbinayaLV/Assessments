# -*- coding: utf-8 -*-
"""lvadsusr139_anomoly_anbu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iEMTHm-1fDqs0FIEiCy5XEwHMk5rQCs6

Importing Libraries
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
from sklearn.ensemble import IsolationForest
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler

"""Reading Data"""

data=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/anomaly_train.csv')

"""Describe"""

data.describe()

"""Info"""

data.info()

"""Missing Values"""

data.isna().sum()# no missing values

"""Duplicates"""

data.duplicated().sum()

"""Correlation Matrix"""

numerical_columns= data.select_dtypes(include=['int','float'])
correl = numerical_columns.corr()

plt.figure(figsize=(10, 8))
sns.heatmap(correl, annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()
print()

"""Outliers box plot"""

sns.boxplot(data=data)
plt.title("Boxplot of Variables")
plt.xticks(rotation=45)
plt.show()
print()

data.columns

features = ['TransactionID', 'Amount', 'Time', 'Location', 'User']#select features

from sklearn.preprocessing import LabelEncoder, StandardScaler
import pandas as pd

# Initialize LabelEncoder
l = LabelEncoder()

# Encode categorical columns
data_encoded = pd.DataFrame()  # Initialize a new DataFrame to store encoded data
for column in data.select_dtypes(include='object').columns:
    data[column] = l.fit_transform(data[column])

data.head()

model = IsolationForest(contamination=0.1, random_state=42)

model.fit(data[features])

data.head()

x= data[features]
data["anomaly_score"] = model.decision_function(x)

data['Anomaly'] = model.predict(data[features])
data['Anomaly'] = data['Anomaly'].apply(lambda x: 'Anomaly' if x == -1 else 'Not Anomaly')

anomalies = data[data['Anomaly'] == 'Anomaly']
non_anomalies = data[data['Anomaly'] == 'Not Anomaly']

plt.scatter(non_anomalies["Amount"], non_anomalies["Location"], c='blue', label='Not Anomaly')
plt.scatter(anomalies["Amount"], anomalies["Location"], c='red', label='Anomaly')
plt.xlabel("Amount")
plt.ylabel("Location")
plt.title("Anomaly Detection")
plt.legend()
plt.show()