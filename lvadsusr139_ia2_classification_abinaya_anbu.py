# -*- coding: utf-8 -*-
"""LVADSUSR139_IA2_Classification_Abinaya_Anbu.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sp_--p_P5pMOfJDxc-3NnP3vQ3jvW-pq
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from xgboost import XGBClassifier
from sklearn.metrics import  accuracy_score,classification_report,precision_score,recall_score,confusion_matrix



data=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/winequality-red.csv')
data.head()

#missing values
data.isna().sum()

mean_d=data.mean()
print(mean_d)

for column in data.columns:
  data=data.fillna(mean_d)

data.isna().sum()

#outliers
for column in data.columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(data[column])

for column in data.select_dtypes(include = "number"):
  q1 = data[column].quantile(0.25)
  q3 = data[column].quantile(0.75)
  iqr = q3-q1
  lower = q1 - 1.5*iqr
  upper = q3 + 1.5* iqr
  data[column] = data[column].clip(lower = lower, upper= upper)

cat_data=data.select_dtypes(include=['object'])
cat_data.columns

numerical_data=data.select_dtypes(include=['int','float'])
cat_data.columns



# Create a StandardScaler object
scaler = StandardScaler()

# Fit the scaler on the entire numerical data
scaler.fit(numerical_data)

# Transform each numerical column using the fitted scaler
numerical_data_scaled = scaler.transform(numerical_data)

# Replace the original numerical data with the scaled data
numerical_data[numerical_data.columns] = numerical_data_scaled

data.columns

x=data.drop(columns=['quality'])
y=data['quality']

xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=42)

random_forest_model = RandomForestClassifier()
random_forest_model.fit(xtrain, ytrain)
y_pred_random_forest = random_forest_model.predict(xtest)

accuracy_random_forest = accuracy_score(ytest, y_pred_random_forest)
#precision_random_forest = precision_score(ytest, y_pred_random_forest)
#recall_random_forest = recall_score(ytest, y_pred_random_forest)
classification_report_=classification_report(ytest, y_pred_random_forest)


print("Random Forest model evaluation:")
print("Accuracy:", accuracy_random_forest)
#print("Precision:", precision_random_forest)
#print("Recall:", recall_random_forest)
print("classification_report",classification_report_)
print()