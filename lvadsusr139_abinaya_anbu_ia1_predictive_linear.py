# -*- coding: utf-8 -*-
"""LVADSUSR139_Abinaya_Anbu_IA1_Predictive_Linear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hd-VVyZGzbeTgUv-3h1m09U0u2LBGHEm
"""

#import libraraies
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression,LogisticRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score,accuracy_score,recall_score,precision_score,f1_score,classification_report,confusion_matrix

"""**Question1**"""

data=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/expenses.csv')

data.head()

#1
# missing values check
data.info()

data.isna().sum()# missing values in bmi

#handling missing values
data.dropna()

data.shape

#outliers
numerical_colm = data.select_dtypes(include=['int','float'])
for column in numerical_colm:
  plt.figure(figsize=(10,5))
  plt.title(column)
  sns.boxplot(x=data[column])

#outliers are in bmi and charges

#handeling outlier
q1=data['bmi'].quantile(0.25)
q3=data['bmi'].quantile(0.75)
iqr=q3-q1
data= data[~((data['bmi']<q1-1.5*iqr)|(data['bmi']>q3+1.5*iqr))]
#removed outlier

data.columns

#handeling outlier
q1=data['charges'].quantile(0.25)
q3=data['charges'].quantile(0.75)
iqr=q3-q1
data= data[~((data['charges']<q1-1.5*iqr)|(data['charges']>q3+1.5*iqr))]
#removed outlier

# q2
#encoding

cat_colm = data.select_dtypes(include=['object'])
data.info()

data['sex'].value_counts()
data['smoker'].value_counts()
encoded_data=pd.get_dummies(data,columns=['sex','smoker','region'],dtype=int)
encoded_data.head()

encoded_data.drop(columns=['region'])

encoded_data.dropna()

encoded_data.isna().sum()

mean_d=encoded_data['bmi'].mean()
encoded_data.fillna(mean_d,inplace=True)

numerical = data.select_dtypes(include=['int','float'])
correlation_matrix=numerical.corr()

#plot
sns.heatmap(correlation_matrix,annot=True)

#3
#feature selection
x=encoded_data.drop(columns=['charges'])
y=encoded_data['charges']

#3
#splitting
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.2,random_state=42)
y_test.shape

#5
#model training
model=LinearRegression()
model.fit(x_train,y_train)
y_pred=model.predict(y_test)

#6
#evaluation
mse=mean_squared_error(y_pred,y_test)
print('MSE',mse)
rmse=mean_squared_error(y_pred,y_test,squared=False)
print('RMSE',rmse)
r2=r2_score(y_pred,y_test)
print('R2 Score',r2)
mae=mean_absolute_error(y_pred,y_test)
print('MAE',mae)

"""**Question2**"""

